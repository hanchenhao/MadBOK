(window.webpackJsonp=window.webpackJsonp||[]).push([[154],{539:function(t,a,v){"use strict";v.r(a);var _=v(54),s=Object(_.a)({},(function(){var t=this,a=t.$createElement,v=t._self._c||a;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h1",{attrs:{id:"领域建模与事件风暴"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#领域建模与事件风暴"}},[t._v("#")]),t._v(" 领域建模与事件风暴")]),t._v(" "),v("p",[t._v("微服务设计为什么要选择 DDD 呢？其中有一个非常重要的原因，就是采用 DDD 方法建立的领域模型，可以清晰地划分微服务的逻辑边界和物理边界。可以说，在 DDD 的实践中，好的领域模型直接关乎微服务的设计水平。")]),t._v(" "),v("p",[t._v("那么我们该采用什么样的方法，才能从错综复杂的业务领域中分析并构建领域模型呢？")]),t._v(" "),v("p",[t._v("它就是我在前面多次提到的事件风暴。事件风暴是一项团队活动，领域专家与项目团队通过头脑风暴的形式，罗列出领域中所有的领域事件，整合之后形成最终的领域事件集合，然后对每一个事件，标注出导致该事件的命令，再为每一个事件标注出命令发起方的角色。命令可以是用户发起，也可以是第三方系统调用或者定时器触发等，最后对事件进行分类，整理出实体、聚合、聚合根以及限界上下文。而事件风暴正是 DDD 战略设计中经常使用的一种方法，它可以快速分析和分解复杂的业务领域，完成领域建模。")]),t._v(" "),v("h2",{attrs:{id:"事件风暴需要准备些什么"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#事件风暴需要准备些什么"}},[t._v("#")]),t._v(" 事件风暴需要准备些什么")]),t._v(" "),v("h3",{attrs:{id:"事件风暴的参与者"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#事件风暴的参与者"}},[t._v("#")]),t._v(" 事件风暴的参与者")]),t._v(" "),v("p",[t._v("事件风暴采用工作坊的方式，将项目团队和领域专家聚集在一起，通过可视化、高互动的方式一步一步将领域模型设计出来。领域专家是事件风暴中必不可少的核心参与者。很多公司可能并没有这个角色，那我们该寻找什么样的人来担当领域专家呢？")]),t._v(" "),v("p",[t._v("领域专家就是对业务或问题域有深刻见解的主题专家，他们非常了解业务和系统是怎么做的，同时也深刻理解为什么要这样设计。如果你的公司里并没有这个角色，也可以从业务人员、需求分析人员、产品经理或者在这个领域有多年经验的开发人员里，按照这个标准去选择合适的人选。")]),t._v(" "),v("p",[t._v("除了领域专家，事件风暴的其他参与者可以是 DDD 专家、架构师、产品经理、项目经理、开发人员和测试人员等项目团队成员。")]),t._v(" "),v("p",[t._v("领域建模是统一团队语言的过程，因此项目团队应尽早地参与到领域建模中，这样才能高效建立起团队的通用语言。到了微服务建设时，领域模型也更容易和系统架构保持一致。")]),t._v(" "),v("h3",{attrs:{id:"事件风暴要准备的材料"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#事件风暴要准备的材料"}},[t._v("#")]),t._v(" 事件风暴要准备的材料")]),t._v(" "),v("p",[t._v("事件风暴参与者会将自己的想法和意见写在即时贴上，并将贴纸贴在墙上的合适位置，我们称这个过程是“刷墙”。所以即时贴和水笔是必备材料，另外，你还可以准备一些胶带或者磁扣，以便贴纸随时能更换位置。")]),t._v(" "),v("p",[t._v("在这个过程中，我们要用不同颜色的贴纸区分领域行为。例如下图，我们可以用蓝色表示命令，用绿色表示实体，橙色表示领域事件，黄色表示补充信息等。补充信息主要用来说明注意事项，比如外部依赖等。颜色并不固定，团队内统一才是重点。")]),t._v(" "),v("p",[v("img",{attrs:{src:"https://static001.geekbang.org/resource/image/3a/f8/3a80b8e7648440a49b809d945e6439f8.jpg",alt:""}})]),t._v(" "),v("h3",{attrs:{id:"事件风暴的场地"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#事件风暴的场地"}},[t._v("#")]),t._v(" 事件风暴的场地")]),t._v(" "),v("p",[t._v("什么样的场地适合做事件风暴呢？是不是需要跟组织会议一样，准备会议室、投影，还有椅子？这些都不需要！你只需要一堵足够长的墙和足够大的空间就可以了。墙是用来贴纸的，大空间可以让人四处走动，方便合作。撤掉会议桌和椅子的事件风暴，你会发现参与者们的效率更高。")]),t._v(" "),v("p",[t._v("事件风暴的发明者曾经建议要准备八米长的墙，这样设计就不会受到空间的限制了。当然，这个不是必要条件，看现实的条件吧，不要让思维受限就好。")]),t._v(" "),v("h3",{attrs:{id:"事件风暴分析的关注点"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#事件风暴分析的关注点"}},[t._v("#")]),t._v(" 事件风暴分析的关注点")]),t._v(" "),v("p",[t._v("在领域建模的过程中，我们需要重点关注这类业务的语言和行为。比如某些业务动作或行为（事件）是否会触发下一个业务动作，这个动作（事件）的输入和输出是什么？是谁（实体）发出的什么动作（命令），触发了这个动作（事件）…我们可以从这些暗藏的词汇中，分析出领域模型中的事件、命令和实体等领域对象。")]),t._v(" "),v("h2",{attrs:{id:"如何用事件风暴构建领域模型"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#如何用事件风暴构建领域模型"}},[t._v("#")]),t._v(" 如何用事件风暴构建领域模型")]),t._v(" "),v("p",[t._v("领域建模的过程主要包括产品愿景、业务场景分析、领域建模和微服务拆分与设计这几个重要阶段。")]),t._v(" "),v("h3",{attrs:{id:"产品愿景"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#产品愿景"}},[t._v("#")]),t._v(" 产品愿景")]),t._v(" "),v("p",[t._v("产品愿景的主要目的是对产品顶层价值的设计，使产品目标用户、核心价值、差异化竞争点等信息达成一致，避免产品偏离方向。")]),t._v(" "),v("p",[t._v("产品愿景的参与角色：领域专家、业务需求方、产品经理、项目经理和开发经理。")]),t._v(" "),v("p",[t._v("在建模之前，项目团队要思考这样两点：")]),t._v(" "),v("ul",[v("li",[t._v("业务系统到底能够做什么？")]),t._v(" "),v("li",[t._v("它的业务范围、目标用户、核心价值和愿景，与其它同类产品的差异和优势在哪里？")])]),t._v(" "),v("p",[t._v("这个过程也是明确用户中台建设方向和统一团队思想的过程。参与者要对每一个点（下图最左侧列的内容）发表意见，用水笔写在贴纸上，贴在黄色贴纸的位置。这个过程会让参与者充分发表意见，最后会将发散的意见统一为通用语言，建立如下图的产品愿景墙。如果团队的产品愿景和目标已经很清晰了，那这个步骤可以忽略。")]),t._v(" "),v("p",[v("img",{attrs:{src:"https://static001.geekbang.org/resource/image/b8/c4/b85983fa6a8c877e77387fdafe1598c4.jpg",alt:""}})]),t._v(" "),v("h3",{attrs:{id:"业务场景分析"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#业务场景分析"}},[t._v("#")]),t._v(" 业务场景分析")]),t._v(" "),v("p",[t._v("场景分析是从用户视角出发的，根据业务流程或用户旅程，采用用例和场景分析，探索领域中的典型场景，找出领域事件、实体和命令等领域对象，支撑领域建模。事件风暴参与者要尽可能地遍历所有业务细节，充分发表意见，不要遗漏业务要点。")]),t._v(" "),v("p",[t._v("场景分析的参与角色：领域专家、产品经理、需求分析人员、架构师、项目经理、开发经理和测试经理。")]),t._v(" "),v("p",[t._v("用户中台有这样三个典型的业务场景：")]),t._v(" "),v("ul",[v("li",[t._v("第一个是系统和岗位设置，设置系统中岗位的菜单权限；")]),t._v(" "),v("li",[t._v("第二个是用户权限配置，为用户建立账户和密码，设置用户岗位；")]),t._v(" "),v("li",[t._v("第三个是用户登录系统和权限校验，生成用户登录和操作日志。")])]),t._v(" "),v("p",[t._v("我们可以按照业务流程，一步一步搜寻用户业务流程中的关键领域事件，比如岗位已创建，用户已创建等事件。再找出什么行为会引起这些领域事件，这些行为可能是一个或若干个命令组合在一起产生的，比如创建用户时，第一个命令是从公司 HR 系统中获取用户信息，第二个命令是根据 HR 的员工信息在用户中台创建用户，创建完用户后就会产生用户已创建的领域事件。当然这个领域事件可能会触发下一步的操作，比如发布到邮件系统通知用户已创建，但也可能到此就结束了，需要根据具体情况来分析是否还有下一步的操作。")]),t._v(" "),v("p",[t._v("场景分析时会产生很多的命令和领域事件。暂时用蓝色来表示命令，用橙色表示领域事件，用黄色表示补充信息，比如用户信息数据来源于 HR 系统的说明。")]),t._v(" "),v("p",[v("img",{attrs:{src:"https://static001.geekbang.org/resource/image/e2/e4/e2f91189e25bbaa81307d1fea694aee4.jpg",alt:""}})]),t._v(" "),v("h2",{attrs:{id:"领域建模"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#领域建模"}},[t._v("#")]),t._v(" 领域建模")]),t._v(" "),v("p",[t._v("领域建模时，我们会根据场景分析过程中产生的领域对象，比如命令、事件等之间关系，找出产生命令的实体，分析实体之间的依赖关系组成聚合，为聚合划定限界上下文，建立领域模型以及模型之间的依赖。领域模型利用限界上下文向上可以指导微服务设计，通过聚合向下可以指导聚合根、实体和值对象的设计。")]),t._v(" "),v("p",[t._v("领域建模的参与角色：领域专家、产品经理、需求分析人员、架构师、项目经理、开发经理和测试经理。")]),t._v(" "),v("p",[v("img",{attrs:{src:"https://static001.geekbang.org/resource/image/cf/fd/cf35a9437319169784db9e5aab97b1fd.jpg",alt:""}})]),t._v(" "),v("p",[v("strong",[t._v("第一步")]),t._v("：从命令和事件中提取产生这些行为的实体。用绿色贴纸表示实体。通过分析用户中台的命令和事件等行为数据，提取了产生这些行为的用户、账户、认证票据、系统、菜单、岗位和用户日志七个实体。")]),t._v(" "),v("p",[v("strong",[t._v("第二步")]),t._v("：根据聚合根的管理性质从七个实体中找出聚合根，比如，用户管理用户相关实体以及值对象，系统可以管理与系统相关的菜单等实体等，可以找出用户和系统等聚合根。然后根据业务依赖和业务内聚原则，将聚合根以及它关联的实体和值对象组合为聚合，比如系统和菜单实体可以组合为“系统功能”聚合。按照上述方法，用户中台就有了系统功能、岗位、用户信息、用户日志、账户和认证票据六个聚合。")]),t._v(" "),v("p",[v("strong",[t._v("第三步")]),t._v("：划定限界上下文，根据上下文语义将聚合归类。根据用户域的上下文语境，用户基本信息和用户日志信息这两个聚合共同构成用户信息域，分别管理用户基本信息、用户登录和操作日志。认证票据和账户这两个聚合共同构成认证域，分别实现不同方式的登录和认证。系统功能和岗位这两个聚合共同构成权限域，分别实现系统和菜单管理以及系统的岗位配置。根据业务边界，我们可以将用户中台划分为三个限界上下文：用户信息、认证和权限。")]),t._v(" "),v("p",[t._v("到这里我们就完成了用户中台领域模型的构建了。那由于领域建模的过程中产生的领域对象实在太多了，我们可以借助表格来记录。")]),t._v(" "),v("p",[v("img",{attrs:{src:"https://static001.geekbang.org/resource/image/68/04/689e27849a72b780ef62176fc0357204.jpg",alt:""}})]),t._v(" "),v("h2",{attrs:{id:"微服务拆分与设计"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#微服务拆分与设计"}},[t._v("#")]),t._v(" 微服务拆分与设计")]),t._v(" "),v("p",[t._v("原则上一个领域模型就可以设计为一个微服务，但由于领域建模时只考虑了业务因素，没有考虑微服务落地时的技术、团队以及运行环境等非业务因素，因此"),v("strong",[t._v("在微服务拆分与设计时，我们不能简单地将领域模型作为拆分微服务的唯一标准，它只能作为微服务拆分的一个重要依据")]),t._v("。")]),t._v(" "),v("p",[t._v("微服务的设计还需要考虑服务的粒度、分层、边界划分、依赖关系和集成关系。除了考虑业务职责单一外，我们还需要考虑将敏态与稳态业务的分离、非功能性需求（如弹性伸缩要求、安全性等要求）、团队组织和沟通效率、软件包大小以及技术异构等非业务因素。")]),t._v(" "),v("p",[t._v("微服务设计如果不考虑非业务因素，我们完全可以按照领域模型与微服务一对一的关系来设计，将用户中台设计为：用户、认证和权限三个微服务。但如果用户日志数据量巨大，大到需要采用大数据技术来实现，这时用户信息聚合与用户日志聚合就会有技术异构。虽然在领域建模时，我们将他们放在一个了领域模型内，但如果考虑技术异构，这两个聚合就不适合放到同一个微服务里了。我们可以以聚合作为拆分单位，将用户基本信息管理和用户日志管理拆分为两个技术异构的微服务，分别用不同的技术来实现它们。")])])}),[],!1,null,null,null);a.default=s.exports}}]);
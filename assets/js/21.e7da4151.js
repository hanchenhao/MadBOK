(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{415:function(t,v,s){"use strict";s.r(v);var _=s(54),r=Object(_.a)({},(function(){var t=this,v=t.$createElement,s=t._self._c||v;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"探寻敏捷本源"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#探寻敏捷本源"}},[t._v("#")]),t._v(" 探寻敏捷本源")]),t._v(" "),s("blockquote",[s("p",[t._v("韩陈昊")])]),t._v(" "),s("p",[t._v("近几年国内传统企业数字化转型的工作开展的如火如荼，常常有一些非IT领域的朋友问我什么是敏捷。随着敏捷这个概念的不断泛化，不同职业，不同领域的人，对敏捷的定义各不相同，仿佛一夜之间突然出现了很多和敏捷有关的专家、学者以及形形色色的从业者，同时也形成了各种匪夷所思的流派。现在谈论的敏捷和早年间我熟悉的那个软件工程实践有了很大的差异。那到底什么是敏捷呢？")]),t._v(" "),s("p",[t._v("据我观察，大多数的从业者都会结合着其自身的特质对敏捷做一个“熟悉”的定义。人力资源部门的人觉得教练技术就是敏捷，因为这种“对话”方式可以无缝与其原有的技能进行衔接。产品部门偶尔会把使用“用户故事地图”当做敏捷，因为在当前的产品的观念中，画原型并不“高级”。不少运维出身的人把DevOps当做敏捷，有些研发团队把“微服务”、“领域驱动设计”当做敏捷，甚至喜欢画画的人可以把做视觉笔记当做敏捷，引导能力强的人会把组织活动当成敏捷，有钱的管理者把构建“中台”当做敏捷。就这样，敏捷以大家最熟悉的形态，发展成了数字化背景下谋生的手艺。")]),t._v(" "),s("p",[t._v("其实做敏捷的过程中，一直有一个问题困惑着大家，它就是：什么才叫一个好的敏捷转型？课程结束的时候，我突然发现这个答案早就写在了敏捷宣言中：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://s3.bmp.ovh/imgs/2022/12/26/26c42008044edd91.png",alt:""}})]),t._v(" "),s("p",[t._v("我们暂时先把敏捷这个定义限制在软件开发这个小范围内，然后就会发现其中最重要的四句话分别对应四类角色：业务/产品、研发/运维、商务/运营、执行/管理。要评估一个敏捷转型做得好不好，其实不用设计过于复杂的度量标准，直接找几个人对着敏捷宣言比较一下就行。")]),t._v(" "),s("p",[s("strong",[t._v("个体和互动高于流程和工具，说的是要加强跨团队的沟通和互动")]),t._v("，提高个体的能力，这样做的效果好过各部门闭门造车，妄图将团队中的个体变成流水线的工具的想法其实并不可取。拿“用户故事”来举例，它本来是促进研发与产品、业务沟通的工具，大家用故事卡可以基于对产品价值的理解，进行近一步的沟通。而实际的情况是，陷入敏捷泥潭的团队，总有人认为用户故事不够“完美”，开发不能基于用户故事展开工作，谁都不愿意迈出沟通的第一步，谁都想把别人当成流水线中可改造的螺丝钉。所以，某种程度上来说，流程和工具并没有目标重要，促进业务与研发团队沟通交流，打破部门也业务之间的芥蒂，彼此了解对方的不易，双方都为提高产品能力而努力才是最重要的，而具体实践范式可以因人而异、因团队的实际情况调整。")]),t._v(" "),s("p",[s("strong",[t._v("工作的软件高于详尽的文档，强调的是结果")]),t._v("。如果拿不出可工作的软件，写再多需求文档，画再多架构图都不会有人买单。如果把软件开发当做一个工程项目，那在市场经济的驱动下，衡量这个项目做得好不好的标准就是：能不能花最少的钱，以最快速度的交付一个好用的软件出来，如果做不到好用，卖便宜点说不定也会有人接受，如果用都不能用，就只有认赔返工。在这种环境下的软件公司，为了能更快的交付软件得到回报，提高工程实践能力，减少不必要的浪费几乎是唯一选择。在那个时候，工程师们可能讨论的就不是怎么给一个不到100人使用的软件设计高并发系统，也不是如何将一个只有一个功能的系统拆成几个“微服务”，而是要老老实实的想一想，如何利用自动化手段提高团队的工作效率，如何通过刻意练习的方式增强自己的编程技艺，最后让软件交付的又快又好。只有这样，才能在行业没有增量、经济下行的时候生存下来。")]),t._v(" "),s("p",[s("strong",[t._v("客户合作高于合同谈判，是说给作为乙方或外包公司听的")]),t._v("。软件从业者要意识到，我们其实并不是什么比别人厉害的知识分子，行业在未来几年也不一定能够产生什么破坏性创新，软件的复制成本极低，我们身处的其实只是一个服务业。机缘巧合，近几年接触很多互联网公司或者科技大厂，发现他们一个显著的特点就是不接地气，他们既不能像制造业那样提供一个可以完全满足客户需求的产品，也不会像零售业那样心平气和的培养稳定的客户关系，他们通常都是先讲一堆外行听起来怎么都不会错的道理，然后拿出合同来说：“你看我们公司多么厉害，快把合同签了，我带你们玩。”就是因为这种完全忽视客户感受的谈判方式，他们才导致很多项目并没有真正的落地。乙方或者外包公司未来的一个发展方向是对外租赁自身的专业能力，客户按需按时按量付费，在这种情况下，只有能够站在客户的角度上思考，充分的尊重和理解客户，才能形成合作的基础。")]),t._v(" "),s("p",[s("strong",[t._v("响应变化高于遵循计划，是开展敏捷转型的前提，只有真正拥抱变化，才能不被追求确定性的条条框框限制住")]),t._v("。很多企业转型没有那么顺利的原因大多是因为过分的追求工作的确定性，而导致行为僵化，无法响应变化。遵循计划通常是中层管理人员缓解自身焦虑的行为倾向，因为高层只关注结果，而基层只需要去执行。工作中我们会遇到很多问题，这些问题通常都不是彼此孤立的，它们相互影响、动态变化，遵循计划其实并不能带来预想的结果，很多人更倾向于认为，导致问题的原因在于没有更好的制定计划、遵循计划，这种思维习惯会让人不可避免的责备或怪罪他人，推脱自己的责任。当今世界持续快速的发生变化，日益复杂，响应变化将有助于我们发现问题的根本原因，看到多种可能性，从而让我们更好的管理、适应复杂性挑战，把握新的机会。")])])}),[],!1,null,null,null);v.default=r.exports}}]);